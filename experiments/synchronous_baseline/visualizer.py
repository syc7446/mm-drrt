import pickle
import os
import argparse

from external.pybullet_planning.pybullet_tools.utils import join_paths, get_parent_dir, connect, disconnect, \
    disable_real_time, set_joint_positions, joint_from_name, wait_for_duration, set_camera_pose, VideoSaver
from external.pybullet_planning.pybullet_tools.pr2_utils import PR2_GROUPS

from examples.envs.pick_place_env import PickPlaceEnvironment, PickPlaceCameraSetup
from examples.envs.object_handover_env import ObjectHandoverEnvironment, ObjectHandoverCameraSetup
from examples.envs.object_cleaning_env import ObjectCleaningEnvironment, ObjectCleaningCameraSetup

from mm_drrt.utils.motion_planner_utils import get_max_length_list

'''
Make sure to comment out "get_gripper" in pick_place_env.py; otherwise, the initial gripper will remain to the end
'''

parser = argparse.ArgumentParser()
parser.add_argument('--load_file', type=str, required=True, help="file path and name")
parser.add_argument('--env_type', type=str, default='cleaning')    # options: pickplace, handover, cleaning

fopt = parser.parse_args()
print(fopt)

path = join_paths(get_parent_dir(__file__), os.pardir, '.')
dbfile = open(path+'/'+fopt.load_file, 'rb')
db = pickle.load(dbfile)

paths = db['paths']
attachments = db['attachments']
opt = db['opt']

sim_id = connect(use_gui=True)
disable_real_time()
if fopt.env_type == 'pickplace':
    set_camera_pose(camera_point=PickPlaceCameraSetup[0], target_point=PickPlaceCameraSetup[1])
    env = PickPlaceEnvironment(num_robots=opt.num_robots, num_objs=opt.num_objs, arm=opt.arm,
                               grasp_type=opt.grasp_type, sim_id=sim_id, seed=opt.seed)
elif fopt.env_type == 'handover':
    set_camera_pose(camera_point=ObjectHandoverCameraSetup[0], target_point=ObjectHandoverCameraSetup[1])
    env = ObjectHandoverEnvironment(num_robots=opt.num_robots, num_objs=opt.num_objs, arm=opt.arm,
                                    grasp_type=opt.grasp_type, sim_id=sim_id, seed=opt.seed)
elif fopt.env_type == 'cleaning':
    set_camera_pose(camera_point=ObjectCleaningCameraSetup[0], target_point=ObjectCleaningCameraSetup[1])
    env = ObjectCleaningEnvironment(num_robots=opt.num_robots, num_objs=opt.num_objs, arm=opt.arm,
                                    grasp_type=opt.grasp_type, sim_id=sim_id, seed=opt.seed)

new_path_6 = [(-1.0, 0.0, 0.5, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.039979673478885, -0.07431216291041547, 0.46958261519878075, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.0799593469577702, -0.14862432582083093, 0.43916523039756106, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.1199390204366553, -0.22293648873124638, 0.40874784559634136, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.1599186939155404, -0.29724865164166187, 0.3783304607951221, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.1998983673944255, -0.37156081455207735, 0.34791307599390286, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.2398780408733105, -0.44587297746249277, 0.3174956911926836, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.2798577143521956, -0.5201851403729082, 0.28707830639146437, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.3198373878310807, -0.5944973032833236, 0.2566609215902451, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.3598170613099658, -0.668809466193739, 0.22624353678902587, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.399796734788851, -0.7431216291041545, 0.19582615198780662, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.439776408267736, -0.8174337920145699, 0.16540876718658737, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.479756081746621, -0.8917459549249853, 0.13499138238536812, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.5197357552255062, -0.9660581178354007, 0.10457399758414887, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.5597154287043913, -1.0403702807458162, 0.07415661278292962, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.5996951021832764, -1.1146824436562315, 0.04373922798171037, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.6396747756621615, -1.1889946065666468, 0.013321843180491122, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.6796544491410466, -1.2633067694770623, -0.017095541620728127, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.7196341226199316, -1.3376189323874779, -0.04751292642194738, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.7596137960988167, -1.4119310952978932, -0.07793031122316663, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.7995934695777018, -1.4862432582083085, -0.10834769602438588, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.839573143056587, -1.560555421118724, -0.13876508082560512, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.879552816535472, -1.6348675840291396, -0.16918246562682437, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.919532490014357, -1.7091797469395549, -0.19959985042804362, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.9595121634932422, -1.7834919098499704, -0.23001723522926287, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-1.9994918369721273, -1.857804072760386, -0.2604346200304821, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.0394715104510124, -1.9321162356708015, -0.29085200483170137, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.0794511839298977, -2.006428398581217, -0.3212693896329206, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.1194308574087826, -2.0807405614916323, -0.35168677443413987, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.1594105308876674, -2.1550527244020476, -0.3821041592353591, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.1993902043665527, -2.229364887312463, -0.41252154403657837, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.239369877845438, -2.3036770502228783, -0.4429389288377976, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.279349551324323, -2.3779892131332936, -0.47335631363901687, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.2925466743622405, -2.37370179945197, -0.4223598321318587, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.3057437974001576, -2.369414385770646, -0.37136335062470005, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.3189409204380746, -2.365126972089322, -0.3203668691175414, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.332138043475992, -2.3608395584079984, -0.26937038761038323, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.3453351665139097, -2.356552144726675, -0.21837390610322505, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.358532289551827, -2.352264731045351, -0.16737742459606642, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.371729412589744, -2.347977317364027, -0.11638094308890778, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.3849265356276614, -2.3436899036827032, -0.0653844615817496, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.398123658665579, -2.3394024900013797, -0.014387980074591411, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.4113207817034965, -2.335115076320056, 0.03660850143256722, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.424517904741414, -2.3308276626387325, 0.08760498293972585, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.4377150277793316, -2.326540248957409, 0.13860146444688404, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.450912150817249, -2.3222528352760854, 0.18959794595404267, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.4641092738551666, -2.317965421594762, 0.2405944274612013, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.477306396893084, -2.3136780079134383, 0.2915909089683595, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.4905035199310017, -2.3093905942321147, 0.3425873904755181, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.5037006429689193, -2.305103180550791, 0.39358387198267675, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.516897766006837, -2.3008157668694675, 0.44458035348983493, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.5300948890447543, -2.296528353188144, 0.49557683499699356, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.543292012082672, -2.2922409395068204, 0.5465733165041522, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.5564891351205894, -2.287953525825497, 0.5975697980113108, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.569686258158507, -2.2836661121441733, 0.6485662795184695, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.5828833811964245, -2.2793786984628497, 0.6995627610256276, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.596080504234342, -2.275091284781526, 0.7505592425327863, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.6092776272722595, -2.2708038711002025, 0.8015557240399449, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.622474750310177, -2.266516457418879, 0.8525522055471031, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.6356718733480946, -2.2622290437375554, 0.9035486870542613, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.648868996386012, -2.257941630056232, 0.9545451685614195, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.6620661194239297, -2.2536542163749083, 1.0055416500685777, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.675263242461847, -2.2493668026935847, 1.0565381315757358, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.6884603654997647, -2.245079389012261, 1.107534613082894, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.7016574885376823, -2.2407919753309375, 1.1585310945900522, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.7148546115756, -2.236504561649614, 1.2095275760972104, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.7280517346135174, -2.2322171479682904, 1.2605240576043686, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.741248857651435, -2.227929734286967, 1.3115205391115268, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.7544459806893524, -2.2236423206056433, 1.362517020618685, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.76764310372727, -2.2193549069243197, 1.4135135021258431, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.7808402267651875, -2.215067493242996, 1.4645099836330013, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.794037349803105, -2.2107800795616726, 1.5155064651401595, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8072344728410226, -2.206492665880349, 1.5665029466473177, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.82043159587894, -2.2022052521990254, 1.617499428154476, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8336287189168576, -2.197917838517702, 1.668495909661634, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.846825841954775, -2.1936304248363783, 1.7194923911687923, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8600229649926927, -2.1893430111550547, 1.7704888726759505, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8732200880306102, -2.185055597473731, 1.8214853541831086, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8864172110685278, -2.1807681837924076, 1.8724818356902668, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779), (-2.8996143341064453, -2.176480770111084, 1.923478317197425, 0.39277395, 0.33330058, 0.0, -1.52238431, 2.72170996, -1.21946936, -2.98914779)]

a, b, c = [], [], []
for q in paths[6]:
    for r in range(3):
        if r == 0:
            a.append(q[10 * r: 10 * (r + 1)])
        elif r == 1:
            b.append(q[10 * r: 10 * (r + 1)])
        elif r == 2:
            c.append(q[10 * r: 10 * (r + 1)])
path = []
for i in range(get_max_length_list([a, new_path_6, c])):
    q = ()
    if i < len(a):
        q += a[i]
    else:
        q += a[-1]
    if i < len(new_path_6):
        q += new_path_6[i]
    else:
        q += new_path_6[-1]
    if i < len(c):
        q += c[i]
    else:
        q += c[-1]
    path.append(q)
paths[6] = path

a, b, c = [], [], []
for q in paths[9]:
    for r in range(3):
        if r == 0:
            a.append(q[10 * r: 10 * (r + 1)])
        elif r == 1:
            b.append(q[10 * r: 10 * (r + 1)])
        elif r == 2:
            c.append(q[10 * r: 10 * (r + 1)])
a = a[:44]
a=[a[0] for _ in range(80)] + a
path = []
for i in range(get_max_length_list([a, b, c])):
    q = ()
    if i < len(a):
        q += a[i]
    else:
        q += a[-1]
    if i < len(b):
        q += b[i]
    else:
        q += b[-1]
    if i < len(c):
        q += c[i]
    else:
        q += c[-1]
    path.append(q)
paths[9] = path


# video_saver = VideoSaver('mrtamp_synchronous_video.mp4')

for i in range(16,len(paths)):
    for j in range(len(paths[i])):
        for r in range(opt.num_robots):
            joints = [joint_from_name(env.robots[r], name) for name in PR2_GROUPS['base']] + \
                     [joint_from_name(env.robots[r], name) for name in PR2_GROUPS['left_arm']]
            set_joint_positions(env.robots[r], joints, paths[i][j][10 * r: 10 * (r + 1)])
            if attachments[i][r]:
                attachments[i][r].assign()
        wait_for_duration(0.01)

# video_saver.restore()
dbfile.close()